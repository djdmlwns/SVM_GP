
# Trainining with only sampling methods
from pyDOE2 import lhs
import numpy as np
from sklearn import svm
from Auxiliarty_function_svm import test, check_class
from Simulation import Simulation

class Sampling_based_SVM():
    def __init__(self, X_initial, max_itr, svm_classifier, report_frq, iteration, sampling_method, accuracy_method= 'F1', case = 'benchmark', svm_random_state = None, 
                **kwargs):
        ''' 
        Train SVM with data generated by sampling determined by method 
        These data are added to initial samples (X_initial) 

        X_initial : initial training data 

        max_itr : maximum number of samples

        report_frq : report frequency

        iteration : number of iteration to calculate the mean/variance of svm accuracy score

        sampling_method: {'LHS' , 'Random'}

        accuracy_method: {'F1', 'MCC', 'Simple'}

        svm_random_state : random number

        '''
        self.X_initial = X_initial
        self.max_itr = max_itr
        self.report_frq = report_frq
        self.iteration = iteration
        self.sampling_method = sampling_method
        self.accuracy_method = accuracy_method
        self.svm_random_state = svm_random_state
        self.score_list = []
        
        if case == 'benchmark': 
            if kwargs == None:
                raise ValueError('For benchmark case, function and feasibility condition should be set')
            else:                
                self.condition = kwargs['condition']

    def train(self):
        score_list = self.score_list
        X_initial = self.X_initial
        dim = X_initial.shape[1]
        max_itr = self.max_itr
        report_frq = self.report_frq
        iteration = self.iteration
        sampling_method = self.sampling_method
        accuracy_method = self.accuracy_method

        for _num_iter in np.arange(0, max_itr + report_frq, report_frq):
            _score_lst = []
            for itr in range(iteration):
                if _num_iter == 0:
                    X = X_initial.copy()

                else: 
                    if sampling_method == 'LHS':
                        X_sample = lhs(dim, samples= _num_iter)
                    elif sampling_method == 'Random':
                        X_sample = np.random.random([_num_iter, dim])
                    else:
                        raise NotImplementedError('There is no such method')
                    X = np.vstack([X_initial, X_sample])

                y = []
                for _X in X:
                    if self.case == 'benchmark':
                        y.append(check_class(_X, self.case, self.condition))
                    else:
                        y.append(check_class(_X, self.case))
                        
                # Initial setting
                svm_classifier = svm.SVC(kernel='rbf', C = 10000, random_state = self.svm_random_state)

                # Fit the data
                svm_classifier.fit(X,y)

                # Test
                score = test(1000, dim, svm_classifier, check_class, method = accuracy_method)
                _score_lst.append(score)
                
            score_list.append(_score_lst)
        
        self.score_list = score_list